#!/bin/env bash

# mokutil-key is a simple bash script designed to aid in managing MOK certificates used for UEFI.
# Copyright (C) 2021 <Michael L. Schaecher@mschaecher78@gmail.com>  under MIT License.

# For the most part MOK (Machine Owner Keys) is not considered secure as .The shim.efi binary is signed by Microsoft allowing for
# Secure Boot of other operating systems.

# Secure Boot process with MOK.

# EFI firmware ______ shim ______ grub ______ kernel ______ Passed
#                                |           |
#                                |___________|
#             Failure _________________|

function mandatory_audit () {

	# Exit script with permission problems.
	test "$(id -u)" -eq "0" || { echo "$_name: root permission is required!" 1>&2 & exit 1 ; }

}

function fix_revise_shape () {

	# Github link to raw mokey.cnf file.
	local _download="https://raw.githubusercontent.com/mschaecher78/$_name/main/src$_cnf"

	# If for some reason the config file couldn't be downloaded; panic.
	if echo "$_name: installing $_cnf" & ! wget -c "$_download" -O $_cnf  &> /dev/null ; then
			echo "$_name: error downloading $_download!" 1>&2 & exit 1
	fi

}

function revise_shape () {

	# Config file is based on the openssl.cnf located /usr/lib/ssl. Mokutil-Key config was located in the users home directory,
	# but is now located in the /etc directory. Avoid rewriting the file, just write to it. This helps keep the premission status
	# of the file.

	# Only allow 2 letter country, this is not something that is required from openssl, infact the full country name can be used,
	# but to keep things simple just uses the standard 2 letter code.
	while test -n "$_country" ; do
		test ${#_country} -eq "2" || read -rp "Too long - 2 characters max: " _country
		if ! sed -i -r "s/countryName.*/countryName\t\t= $_country/g" $_cnf ; then
			echo "$_name: error writing '$_country' to $_cnf"  1>&2 ; exit 1
		fi
		break
	done

	# Cannot allow an empty variable to be written to the config file, so relay as default if nothing is entered from the user.
	if test -n $_state ; then
		if ! sed -i -r "s/stateOrProvinceName.*/stateOrProvinceName\t= $_state/g" $_cnf ; then
			echo "$_name: error writing '$_state' to $_cnf" 1>&2 ; exit 1
		fi
	fi

	if test -n "$_city" ; then
		if ! sed -i -r "s/localityName.*/localityName\t\t= $_city/g" $_cnf ; then
			echo "$_name: error writing '$_city' to $_cnf" 1>&2 ; exit 1
		fi
	fi

	if test -n"$_org" ; then
		if ! sed -i -r "s/0.organizationName.*/0.organizationName\t= $_org/g" $_cnf ; then
			echo "$_name: error writing '$_org' to $_cnf" 1>&2 ; exit 1
		fi
	fi

	if test -n "$_title" ; then
		if ! sed -i -r "s/commonName.*/commonName\t\t= $_title/g" $_cnf ; then
			echo "$_name: error writing '$_title' to $_cnf" 1>&2 ; exit 1
		fi
	fi

	if test -n "$_mail" ; then
		if ! sed -i -r "s/emailAddress\t\t=.*/emailAddress\t\t= $_mail/g" $_cnf ; then
			echo "$_name: error writing '$_mail' to $_cnf" 1>&2 ; exit 1
		fi
	fi

}

function set_up_premit () {

	# For some reason even if the openssl fails to generate new private key and public certificates, mokey well sometimes think
	# that that the command worked. So in order for a new to be generated the old one needs to be moved.

	# Rename private key and public certificates.
	find $_dir -type f -name "$_name.*" | while read -r _file ; do mv -f $_file $_file.old ; done

	# Generate private key first and public certificates
	echo "Creating new private and public key pair" &
	openssl req -config "$_cnf" -sha256 -new -x509 -newkey rsa:$_rsa \
	-nodes -days $_exr -outform DER -out $_der &> /dev/null && openssl \
	x509 -in $_der -inform DER -outform PEM -out $_pem &> /dev/null


	# Testing that the command ran without error still cause mokutil-key to should that the private key and public
	# certificates were created: even with nothing was done. In order to fix this, the older key and certificates
	# are removed.

	# Check that the files exist.
	if test ! -f "${_key}" && test ! -f "${_der}" && test ! -f "${_pem}" ; then
		echo "${_name}: failed to create private/public certificate!" 1>&2 ; exit 1
	fi

	rm -f $_dir*.old						# If everything goes well remove the old.

}

function john_hancock () {

	# Check that the key pair used matches.
	if ! test "$_check_private" = "$_check_public" ; then
		echo "$_name: public certificate does't match with private key!" 1>&2 ; exit 1
	fi

	# This only works for key and certificate pairs generatered the way that is described by Ubuntu and Redhat.
	# If using any other key pair well produce an error and fixing that would be overly complicated, so it would
	# be better to require Ubuntu style keys.

	# In order to keep things simple use case option instead of different functions. That way everything is under
	# one roof sort-of speak.
	case "$_sign" in
		"all"		)
			test -z "$_crt" && _crt="$_der"			# If certificate is not set use default.

			# There is no need to relay what module is being signed, just that modules are being signed.
			echo "$_name: signing all kernel modules in $_signing" & find \
			$_signing -type f -name "*.ko" | while read -r _modules ; do
				if ! kmodsign sha512 $_key $_crt $_modules &> /dev/null ; then
					echo "$_name: unable to sign $_modules" 1>&2 ; exit 1
				fi
			done
		;;
		"mod"		)
			test -z "$_crt" && _crt="$_der"			# If certificate is not set use default.

			if echo "$_name: signing kernel module in $_signing" &
			! kmodsign sha512 $_key $_crt $_signing &> /dev/null ; then
				echo "$_name: unable to sign $_signing" 1>&2 ; exit 1
			fi
		;;
		"bin"		)
			# Use different public certificate for binary images.
			test -z "$_crt" && _crt="pem"

			if echo "$_name: signing binary image $_signing" & sbsign --key $_key \
			--cert $_crt $_signing --output $_signing.signed &> /dev/null ; then
				mv -f $_signing.signed $_signing
			else
				echo "$_name: unable to sign $_signing" 1>&2 ; exit 1
			fi
		;;
	esac

}

set -e		# Allows exit as soon as an exit error code is passed, e.i. `exit 1` or `exit 126`.

_name="mokey"
_version="1.44-307"

# The following variables should be readonly in order to pervent something for being changed that should be.

# Default location for private and public certificates.
readonly _dir="/etc/$_name/"
# Default openssl config file used by mokutil-key.
readonly _cnf="/etc/$_name.cnf"

readonly _der="$_dir/$_name.der"					# Public certificate used be MOK.
readonly _pem="$_dir/$_name.pem"					# Public certificate used for signing.
readonly _key="$_dir/$_name.key"					# Private certificate used for signing.

_rsa="2048"								# This is the default rsa bit size.
_exr="3650"								# The default of 10 years.

# The license that mokey is under should be displayed.
readonly _license="$(cat << EOF
Copyright (C) 2021 MIT License. <Michael L. Schaecher@mschaecher78@gmail.com>
Homepage <https://www.github.com/mschaecher78/mokutil-key/>
EOF
)"

# Give quick info about mokey.
readonly _info="$(cat << EOF
$_name v$_version : A tool for creating MOK Management keys for Secure Boot.
EOF
)"

# Good help is so hard to find, I really don't like that saying.
readonly _usage="$(cat << EOF
${_info}

usage
	$_name command arg... | $_name command arg... <option/config option> | $_name command arg... <option> arg...

Command:
	sign				Sign module or image file when used with an option.

	config				Edit config file used for certificate generation. This file can also be manually
					edit using text editor.

	generate			Generate certificate using mokutil-key.cnf and options.

	enroll				Register certificate into MOK. Warning: only the public certificate is registered
					located in ${_etc_dir}.

	help				Displays help info.

	version				Displays version info only.

Option:
	-a, --all-mods '/path/to'	Sign all kernel modules with private and public certificate.

	-m, --mod '/path/to'		Sign a single kernel modules with private and public certificate.

	-b, --binary '/path/to'		Sign kernel image or efi binary with private and public certificate.

	-k, --key /path/to'		Use different private key for signing.

	-p, --public '/path/to'		Use different public certificate for signing.

	-r, --rsa			Set rsa encryption size, if no argument is present the default is used.

	-x, --expires			Set days when certificate expires, if no argument is present the default is used.

	-c, --config 'openssl.cnf'	Set path to openssl.cnf file.

	    --fix			Fix missing config.

Config Option:
	-C				Current 2 letter country code.

	-ST				Current state or province.

	-L				Current city.

	-O				Name of organization or company name.

	-CN				Name of group related to organization or company.

	-M				Email of group, person or company.

${_license}
EOF
)"

# Eventhough mokey comes with a config file that is used for openssl commands, still check that it exists and has
# not been deleted. However this does't mean that mokey needs to be reinstalled, just fixed.
test -f "$_cnf" || {

	readonly _array=( "config" "help" "version" )			# Array of allowed pass through.

	# Anything that does not match with variable _a then that function is not allowed.
	[[ ! " ${_array[*]}" =~ $1 ]] && {
		echo -e "$_name: missing config file, please run \`sudo $_name configure --fix\`!" 1>&2 ; exit 1
	}

}

# Because there are many different option that can be use, the use a `while loop`, getopt is not needed for this to
# work. Besides getopt just adds more complication to an already complicated script.
while true ; do case "$1" in
	"sign"			)	mandatory_audit ; _command="john_hancock" ;;
	"config"		)	mandatory_audit ; _command="revise_shape" ;;
	"generate"		) 	mandatory_audit ; _command="set_up_premit" ;;
	"help"			)	echo "$_usage" ; exit 0 ;;
	"version"		)	echo -e "$_info\n\n$_license" ; exit 0 ;;
	"-a"|"--all-mod"	)
		# Make sure that the directory exists.
		test -d "$2" || { echo "$_name: $2 not a directory!" 1>&2 ; exit ; }
		_sign="all"
		_signing="$2"
	;;
	"-m"|"--mod"		)
		# Make sure that the directory exists.
		if ! echo "$2" | grep -qe'.*.ko' &> /dev/null ; then
			echo "$_name: $2 not a kernel module!" 1>&2 ; exit
		else
			_sign="mod" ; _signing="$2"
		fi
	;;
	"-b"|"--binary"		)
		# Make sure that only the binary images that can be signed are signed.
		test ! -f "$2" && { echo "$_mokey: $2 doesn't exist or is not a file!" 1>&2 ; exit 1 ; }
		if ! (echo "$2" | grep -q 'vmlinuz.*') || ! (echo "$2" | grep -q 'grub.*.efi') ; then
			echo "$_name: signing $2 is not premintted!" 1>&2 ; exit 1
		else
			_sign="bin" ; _signing="$2"
		fi
	;;
	"-k"|"--key"		)
		# make sure that the file is a file and not a directory and if everything is good then set _path
		# variable.
		if test -f "$2" ; then
			_key="$2"
			_check_private=$(openssl rsa -noout -modulus -in "$_key" | openssl md5)
		else
			echo "$_name: $2 is not a valid file!" 1>&2
			exit 1
		fi
	;;
	"-p"|"--public"		)
		_crt="$2"
		# Do the same fot the public certificate that was done for the private key.
		if test ! -f "$_crt" ; then
			echo "$_name: $2 is not a valid file!" 1>&2
			exit 1
		else
			case "$_sign" in
				"all"|"mod"	)
					if ! openssl x509 -in "$_crt" -text &> /dev/null ; then
						echo "$_name: key type is not DER x509 format!" ; exit 1
					else
						_check_public=$(openssl x509 -noout -modulus -inform PEM \
						-in "$_crt" | openssl md5)
					fi
				;;
				"binary"	)
					if openssl x509 -in "$_crt" -text &> /dev/null ; then
						echo "$_name: key type is not PEM format!" ; exit 1
					else
						_check_public=$(openssl x509 -noout -modulus -inform DER \
						-in "$_crt" | openssl md5)
					fi
				;;
			esac
		fi
	;;
	"-r"|"--rsa"		)
		# This option can be ran without an argument, if that is done then set default.
		! echo "$2" | grep -qe '-.*' && _rsa="$2" || break

		# Only except numbers, error out if letters are used.
		if test "${_rsa##[0-9]*}" ; then
			echo "$_name: '$_rsa' invalid argument!" 1>&2
			exit 1
		fi

		# If out of range the error.
		if test "$_rsa" -lt "2048" || test "$_rsa" -gt "8192" ; then
			echo "$_name: '$_rsa' out of range [2048 - 8192] bits!" 1>&2
			exit 1
		fi
	;;
	"-x"|"--expires"	)
		# This option can be ran without an argument, if that is done then set default.
		! echo "$2" | grep -qe '-.*' && _exr="$2" || break

		# Only except numbers, error out if letters are used.
		if test "${_exr##[0-9]*}" ; then
			echo "$_name: '$_exr' invalid argument!" 1>&2
			exit 1
		fi

		# If out of range the error.
		if test "$_exr" -gt "3650" ; then
			echo "$_name: '$1' out of range [2048 - 8192] bits!" 1>&2
			exit 1
		fi
	;;
	"-c"|"--config"		)	test -z "$1" || test -f "$1" && _cnf="$1" ;;
	"--fix"			)
		# Make sure that --fix option only works with config command.
		if ! test "$_command" = "revise_shape" ; then
			echo "$_name: '--fix' option only works with 'config' command!" 1>&2
			exit 1
		fi

		_command="fix_${_command}"
	;;
	"-C"			)	shift ; _country="$1" ;;
	"-ST"			)	shift ; _state="$1" ;;
	"-L"			)	shift ; _city="$1" ;;
	"-O"			)	shift ; _org="$1" ;;
	"-CN"			)	shift ; _title="$1" ;;
	"-M"			)	shift ; _mail="$1" ;;
esac ; shift ; test -z "$1" && break ; done

# If the command is set then exit with an error.
if ! $_command ; then echo "$_name: command not found or missing!" 1>&2 ; exit 126 ; fi
